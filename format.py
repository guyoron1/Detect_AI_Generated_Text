# To format data to competition format - including creation of prompts based on promptless ones
import pandas as pd

import fetch_data

DATASET_NAME_TO_PATH = {
    'daigt': './external_sources/daigt/train_v2_drcat_02.csv',
    'persuade': './external_sources/persuade'
}

REQUIRED_COLS = (
    'prompt_name', # Identifier for prompt in plaintext.
    'prompt_text', # Actual prompt.
    'essay', # Essay writted by student / LLM.
    'is_prompt_llm_generated', # For datasets that lack prompts - whether the prompt was generated by us in reverse.
    'generated', # Classification label - 0 by student, 1 by LLM (target)
    )
def format_dataset(dataset_name):
    """
    Given dataset identifier return df with data as formatted for competition.
    """
    path = DATASET_NAME_TO_PATH[dataset_name]
    plain_df = dataset_to_pandas(dataset_name, path)
    df_with_prompts = add_prompts(plain_df) # Fill in prompts with LLM pipeline (if needed)
    df_with_prompts_and_prompt_texts = add_prompt_texts(df_with_prompts) # Fill in missing texts for prompts



def dataset_to_pandas(dataset_name, path):
    if path.endswith(".csv"):
        df = pd.read_csv(path)
    else:
        pass
    # Divide into cases by datasets.
    if dataset_name == 'daigt':
        df = format_daigt_to_df(df)

def format_daigt_to_df(df: pd.DataFrame):
    df = df.rename(columns={'text':'assignment','label':'generated'})
    df = df[df['RDizzl3_seven'] == True] # Filtering present in Daigt2.0 that says whether the essay was written in response to an original prompt from the challange.
    df = df.drop(columns=['RDizzl3_seven','source'])
    mapping = fetch_data.map_prompt_name_to_prompt_text_persuade()
    df['prompt_text'] = df['prompt_name'].map(mapping)
    return df


def add_prompts(df: pd.DataFrame): #todo: guy
    pass

def add_prompt_texts(df: pd.DataFrame):
    pass


if __name__ == '__main__':
    dataset_to_pandas('daigt', DATASET_NAME_TO_PATH['daigt'])
